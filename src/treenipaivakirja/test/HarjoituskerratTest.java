package treenipaivakirja.test;
// Generated by ComTest BEGIN
import java.io.File;
import treenipaivakirja.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.09 09:13:37 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class HarjoituskerratTest {



  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta69 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta69() throws SailoException {    // Harjoituskerrat: 69
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta juoksu1 = new Harjoituskerta(), juoksu2 = new Harjoituskerta(); 
    juoksu1.vastaaJuoksu(); 
    juoksu2.vastaaJuoksu(); 
    String tiedNimi = "testitreenit"; 
    File ftied = new File(tiedNimi+"/harjoitukset.dat"); 
    ftied.delete(); 
    try {
    harjoitukset.lueTiedostosta(tiedNimi); 
    fail("Harjoituskerrat: 80 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    harjoitukset.lisaa(juoksu1); 
    harjoitukset.lisaa(juoksu2); 
    harjoitukset.tallenna(tiedNimi); 
    harjoitukset = new Harjoituskerrat();  // Poistetaan vanhat luomalla uusi
    harjoitukset.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Harjoituskerta> i = harjoitukset.iterator(); 
    assertEquals("From: Harjoituskerrat line: 87", true, i.hasNext()); 
    harjoitukset.lisaa(juoksu2); 
    harjoitukset.tallenna(tiedNimi); 
    assertEquals("From: Harjoituskerrat line: 90", true, ftied.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa136 */
  @Test
  public void testLisaa136() {    // Harjoituskerrat: 136
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta juoksu1 = new Harjoituskerta(), juoksu2 = new Harjoituskerta(); 
    assertEquals("From: Harjoituskerrat line: 139", 0, harjoitukset.getLkm()); 
    harjoitukset.lisaa(juoksu1); assertEquals("From: Harjoituskerrat line: 140", 1, harjoitukset.getLkm()); 
    harjoitukset.lisaa(juoksu2); assertEquals("From: Harjoituskerrat line: 141", 2, harjoitukset.getLkm()); 
    harjoitukset.lisaa(juoksu1); assertEquals("From: Harjoituskerrat line: 142", 3, harjoitukset.getLkm()); 
    assertEquals("From: Harjoituskerrat line: 143", juoksu1, harjoitukset.anna(0)); 
    assertEquals("From: Harjoituskerrat line: 144", juoksu2, harjoitukset.anna(1)); 
    assertEquals("From: Harjoituskerrat line: 145", juoksu1, harjoitukset.anna(2)); 
    assertEquals("From: Harjoituskerrat line: 146", false, harjoitukset.anna(1) == juoksu1); 
    assertEquals("From: Harjoituskerrat line: 147", true, harjoitukset.anna(1) == juoksu2); 
    try {
    assertEquals("From: Harjoituskerrat line: 148", juoksu1, harjoitukset.anna(3)); 
    fail("Harjoituskerrat: 148 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    harjoitukset.lisaa(juoksu1); assertEquals("From: Harjoituskerrat line: 149", 4, harjoitukset.getLkm()); 
    harjoitukset.lisaa(juoksu1); assertEquals("From: Harjoituskerrat line: 150", 5, harjoitukset.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testHaeSuosituinLaji178 */
  @Test
  public void testHaeSuosituinLaji178() {    // Harjoituskerrat: 178
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta juoksu1 = new Harjoituskerta(), juoksu2 = new Harjoituskerta(); 
    juoksu1.rekisteroi(); 
    juoksu1.vastaaJuoksu(); 
    juoksu2.rekisteroi(); 
    juoksu2.vastaaJuoksu(); 
    juoksu2.setLajiNro(2); 
    harjoitukset.lisaa(juoksu1); 
    harjoitukset.lisaa(juoksu2); 
    assertEquals("From: Harjoituskerrat line: 188", 1, harjoitukset.haeSuosituinLaji()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLaskeKeskiKuormittavuus222 */
  @Test
  public void testLaskeKeskiKuormittavuus222() {    // Harjoituskerrat: 222
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta juoksu1 = new Harjoituskerta(), juoksu2 = new Harjoituskerta(); 
    juoksu1.rekisteroi(); 
    juoksu1.vastaaJuoksu(); 
    juoksu2.rekisteroi(); 
    juoksu2.vastaaJuoksu(); 
    harjoitukset.lisaa(juoksu1); 
    harjoitukset.lisaa(juoksu2); 
    assertEquals(harjoitukset.laskeKeskiKuormittavuus(), 6, 0.01); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLaskeKeskimatka249 */
  @Test
  public void testLaskeKeskimatka249() {    // Harjoituskerrat: 249
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta juoksu1 = new Harjoituskerta(), juoksu2 = new Harjoituskerta(); 
    juoksu1.rekisteroi(); 
    juoksu1.vastaaJuoksu(); 
    juoksu2.rekisteroi(); 
    juoksu2.vastaaJuoksu(); 
    harjoitukset.lisaa(juoksu1); 
    harjoitukset.lisaa(juoksu2); 
    assertEquals(harjoitukset.laskeKeskimatka(), 7.0, 0.01); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testHaePisinmatka279 */
  @Test
  public void testHaePisinmatka279() {    // Harjoituskerrat: 279
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta juoksu1 = new Harjoituskerta(), juoksu2 = new Harjoituskerta(); 
    juoksu1.rekisteroi(); 
    juoksu1.vastaaJuoksu(); 
    juoksu2.rekisteroi(); 
    juoksu2.vastaaJuoksu(); 
    juoksu2.setMatka("8.8"); 
    harjoitukset.lisaa(juoksu1); 
    harjoitukset.lisaa(juoksu2); 
    assertEquals(harjoitukset.haePisinmatka(), 8.8, 0.01); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa312 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa312() throws SailoException,CloneNotSupportedException {    // Harjoituskerrat: 312
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta harjoitus1 = new Harjoituskerta(), harjoitus2 = new Harjoituskerta(); 
    harjoitus1.rekisteroi(); harjoitus2.rekisteroi(); 
    assertEquals("From: Harjoituskerrat line: 318", 0, harjoitukset.getLkm()); 
    harjoitukset.korvaaTaiLisaa(harjoitus1); assertEquals("From: Harjoituskerrat line: 319", 1, harjoitukset.getLkm()); 
    harjoitukset.korvaaTaiLisaa(harjoitus2); assertEquals("From: Harjoituskerrat line: 320", 2, harjoitukset.getLkm()); 
    Harjoituskerta harjoitus3 = harjoitus1.clone(); 
    harjoitus3.setKuormittavuus("3"); 
    Iterator<Harjoituskerta> it = harjoitukset.iterator(); 
    assertEquals("From: Harjoituskerrat line: 324", true, it.next() == harjoitus1); 
    harjoitukset.korvaaTaiLisaa(harjoitus3); assertEquals("From: Harjoituskerrat line: 325", 2, harjoitukset.getLkm()); 
    it = harjoitukset.iterator(); 
    Harjoituskerta j0 = it.next(); 
    assertEquals("From: Harjoituskerrat line: 328", harjoitus3, j0); 
    assertEquals("From: Harjoituskerrat line: 329", true, j0 == harjoitus3); 
    assertEquals("From: Harjoituskerrat line: 330", false, j0 == harjoitus1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista351 
   * @throws SailoException when error
   */
  @Test
  public void testPoista351() throws SailoException {    // Harjoituskerrat: 351
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta tiistai1 = new Harjoituskerta(), tiistai2 = new Harjoituskerta(), tiistai3 = new Harjoituskerta(); 
    tiistai1.rekisteroi(); tiistai2.rekisteroi(); tiistai3.rekisteroi(); 
    int id1 = tiistai1.getTunnusNro(); 
    harjoitukset.lisaa(tiistai1); harjoitukset.lisaa(tiistai2); harjoitukset.lisaa(tiistai3); 
    assertEquals("From: Harjoituskerrat line: 358", 1, harjoitukset.poista(id1+1)); 
    assertEquals("From: Harjoituskerrat line: 359", -1, harjoitukset.etsiId(id1+1)); assertEquals("From: Harjoituskerrat line: 359", 2, harjoitukset.getLkm()); 
    assertEquals("From: Harjoituskerrat line: 360", 1, harjoitukset.poista(id1)); assertEquals("From: Harjoituskerrat line: 360", 1, harjoitukset.getLkm()); 
    assertEquals("From: Harjoituskerrat line: 361", 0, harjoitukset.poista(id1+3)); assertEquals("From: Harjoituskerrat line: 361", 1, harjoitukset.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId381 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId381() throws SailoException {    // Harjoituskerrat: 381
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta har1 = new Harjoituskerta(), har2 = new Harjoituskerta(), har3 = new Harjoituskerta(); 
    har1.rekisteroi(); har2.rekisteroi(); har3.rekisteroi(); 
    int id1 = har1.getTunnusNro(); 
    harjoitukset.lisaa(har1); harjoitukset.lisaa(har2); harjoitukset.lisaa(har3); 
    assertEquals("From: Harjoituskerrat line: 388", 1, harjoitukset.etsiId(id1+1)); 
    assertEquals("From: Harjoituskerrat line: 389", 2, harjoitukset.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testHarjoituskerratIterator439 
   * @throws SailoException when error
   */
  @Test
  public void testHarjoituskerratIterator439() throws SailoException {    // Harjoituskerrat: 439
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta juoksu1 = new Harjoituskerta(), juoksu2 = new Harjoituskerta(); 
    juoksu1.rekisteroi(); juoksu2.rekisteroi(); 
    harjoitukset.lisaa(juoksu1); 
    harjoitukset.lisaa(juoksu2); 
    harjoitukset.lisaa(juoksu1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Harjoituskerta har:harjoitukset) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+har.getTunnusNro()); 
    String tulos = " " + juoksu1.getTunnusNro() + " " + juoksu2.getTunnusNro() + " " + juoksu1.getTunnusNro(); 
    assertEquals("From: Harjoituskerrat line: 458", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Harjoituskerta>  i=harjoitukset.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Harjoituskerta har = i.next(); 
    ids.append(" "+har.getTunnusNro()); 
    }
    assertEquals("From: Harjoituskerrat line: 466", tulos, ids.toString()); 
    Iterator<Harjoituskerta>  i=harjoitukset.iterator(); 
    assertEquals("From: Harjoituskerrat line: 469", true, i.next() == juoksu1); 
    assertEquals("From: Harjoituskerrat line: 470", true, i.next() == juoksu2); 
    assertEquals("From: Harjoituskerrat line: 471", true, i.next() == juoksu1); 
    try {
    i.next(); 
    fail("Harjoituskerrat: 473 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi533 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi533() throws SailoException {    // Harjoituskerrat: 533
    Harjoituskerrat harjoitukset = new Harjoituskerrat(); 
    Harjoituskerta har1 = new Harjoituskerta(); har1.parse("1|7.12.20|1|44:32|7.0|6|Jaksoin juosta todella hyvin"); 
    Harjoituskerta har2 = new Harjoituskerta(); har2.parse("2|9.12.20|1|27:32|4.0|2|Nyt ei kulkenut oikein"); 
    Harjoituskerta har3 = new Harjoituskerta(); har3.parse("3|11.12.20|1|44:27|7.0|2|Nyt ei kulkenut oikein"); 
    Harjoituskerta har4 = new Harjoituskerta(); har4.parse("4|15.12.20|1|44:32|7.0|6|Jaksoin juosta todella hyvin"); 
    Harjoituskerta har5 = new Harjoituskerta(); har5.parse("5|20.12.20|1|27:32|4.0|2|Nyt ei kulkenut oikein"); 
    harjoitukset.lisaa(har1); harjoitukset.lisaa(har2); harjoitukset.lisaa(har3); harjoitukset.lisaa(har4); harjoitukset.lisaa(har5); 
  } // Generated by ComTest END
}